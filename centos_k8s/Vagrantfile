# -*- mode: ruby -*-
# vi: set ft=ruby :

$vm_name = "centosk8s"
$hostname = "k8s"
$version = "1.15.1"
$network = "10.244.0.0/16"
$hostip = "192.168.100.107"

Vagrant.configure("2") do |config|
    config.vm.define $vm_name do |k8s|
        k8s.vm.box = "centos/7"
        # k8s.vm.box_check_update = false
        # k8s.vm.network "forwarded_port", guest: 80, host: 8080
        # k8s.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
        k8s.vm.hostname #{$hostname}
        k8s.vm.network "public_network", ip: "#{$hostip}", bridge: "en0: Wi-Fi (Wireless)"

        # k8s.vm.network "public_network", type: "dhcp", bridge: "en0"

        # k8s.vm.synced_folder "/Users/sjw/k8s_data", "/data"

        k8s.vm.provider "virtualbox" do |vb|
            # Display the VirtualBox GUI when booting the machine
            # vb.gui = true
            vb.cpus = 2

            # Customize the amount of memory on the VM:
            vb.memory = "4096"
        end

    # k8s.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL

        #change aliyun source
        k8s.vm.provision "shell", inline: <<-SHELL
            echo "=========++++++++++++++++++++++=============="
            echo "ADD aliyun and epel base repo and install usually tools !!!!!!!!"
            hostnamectl set-hostname "#{$vm_name}"
            yum install -y wget
            wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo

            yum install -y epel-release

            yum clean all
            yum makecache
            yum install -y net-tools iproute lrzsz vim bash-completion wget tree bridge-utils unzip bind-utils git gcc
        SHELL

        #stop firewall
        k8s.vm.provision "shell", inline: <<-SHELL
            echo "=========++++++++++++++++++++++=============="
            echo "Stop firewall    ~~~~~~~~"
            sudo -i
            systemctl disable firewalld
            systemctl stop firewalld

            swapoff -a
            exit
        SHELL

        #install docker
        k8s.vm.provision "shell", inline: <<-SHELL
            echo "=========++++++++++++++++++++++=============="
            echo "Install doecker ***************"
            sudo -i
            yum install -y yum-utils
            yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
            yum makecache fast
            yum install -y docker-ce

            systemctl enable docker
            systemctl start docker
            exit
        SHELL

        #add k8s repo, aliyun
        k8s.vm.provision "shell", inline: <<-SHELL
            echo "=========++++++++++++++++++++++=============="
            echo "add aliyun k8s  repos ***************"
            sudo -i
cat >> /etc/yum.repos.d/kubernetes.repo << EOF
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=0
EOF
            exit
        SHELL


        #install k8s
        k8s.vm.provision "shell", inline: <<-SHELL
            echo "=========++++++++++++++++++++++=============="
            echo "Install k8s   ***************"
            sudo -i
            yum install -y kubelet kubeadm kubectl
            #for i in `kubeadm config images list`; do 
            #    imageName=${i#k8s.gcr.io/}
            #    docker pull registry.aliyuncs.com/google_containers/$imageName
            #    docker tag registry.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName
            #    docker rmi registry.aliyuncs.com/google_containers/$imageName
            #done;

            systemctl enable kubelet 
            systemctl start kubelet

            sysctl net.bridge.bridge-nf-call-iptables=1
            sysctl net.bridge.bridge-nf-call-ip6tables=1

            #kubeadm init --pod-network-cidr=#{$network} --kubernetes-version=v#{$version}
            kubeadm init --kubernetes-version=v#{$version} --pod-network-cidr=#{$network} --image-repository=registry.aliyuncs.com/google_containers | tee kubeadm-init.log

            iptables -P FORWARD ACCEPT

            kubectl apply -f https://docs.projectcalico.org/v3.8/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
    
            echo "init kubectl"
            mkdir -p $HOME/.kube
            sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config

            kubectl taint node $(hostname) node-role.kubernetes.io/master-

            exit
        SHELL

        #install nginx
        k8s.vm.provision "shell", inline: <<-SHELL
            sudo -i
cat >> ./nginx.yaml << EOF
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-controller
spec:
  replicas: 2
  selector:
    name: nginx
  template:
    metadata:
      labels:
        name: nginx
    spec:
      containers:
        - name: nginx
          image: nginx
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service-nodeport
spec:
  ports:
    - port: 8000
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    name: nginx
EOF
            kubectl apply -f nginx.yaml
            exit
        SHELL
    end
end
